"
Check if a superclass defined in a FM3MetaDescription (generated by a class anoted with fm3 pragmas) exist and has the good declaration (name, package)
"
Class {
	#name : #FameSuperclassMetaDescribedExistRule,
	#superclass : #ReAbstractRule,
	#category : #'Fame-Rules'
}

{ #category : #testing }
FameSuperclassMetaDescribedExistRule class >> checksClass [

	^ true
]

{ #category : #accessing }
FameSuperclassMetaDescribedExistRule class >> group [
	^ 'Fame'
]

{ #category : #accessing }
FameSuperclassMetaDescribedExistRule class >> ruleName [

	^ 'The superclass defined in a FM3MetaDescription does not exist or is not well defined'
]

{ #category : #accessing }
FameSuperclassMetaDescribedExistRule class >> uniqueIdentifierName [
	^ 'SuperclassMetaDescribedExist'
]

{ #category : #running }
FameSuperclassMetaDescribedExistRule >> basicCheck: aClass [

	| class |
	class := aClass isClassSide
		         ifTrue: [ aClass ]
		         ifFalse: [ aClass class ].

	(Pragma allNamed: #FMClass:super: in: class) ifNotEmpty: [ :pragmas |
		| pragma substrings metaSuperclassName |
		pragmas size > 1 ifTrue: [ ^ true ].

		pragma := pragmas first.
		metaSuperclassName := pragma argumentAt: 2.
		substrings := metaSuperclassName asString substrings: #( $. ).

		substrings size > 1
			ifTrue: [ Smalltalk at: (substrings first , substrings second) asSymbol ifAbsent: [ ^ true ] ]
			ifFalse: [ Smalltalk at: substrings first asSymbol ifAbsent: [ ^ true ] ] ].
	^ false
]
